Search.setIndex({"docnames": ["api_ref/hpt", "api_ref/hpt.utils", "api_ref/modules", "example_usage", "examples/README", "examples/example-usage", "index", "readme"], "filenames": ["api_ref/hpt.rst", "api_ref/hpt.utils.rst", "api_ref/modules.rst", "example_usage.rst", "examples/README.md", "examples/example-usage.ipynb", "index.rst", "readme.rst"], "titles": ["hpt package", "hpt.utils package", "<code class=\"code docutils literal notranslate\"><span class=\"pre\">hpt</span></code> package", "Example Jupyter Notebook", "&lt;no title&gt;", "Use hpt package to train models", "Welcome to <code class=\"code docutils literal notranslate\"><span class=\"pre\">hyperparameter-tuning</span></code>\u2019s documentation!", "README.md"], "terms": {"continu": 0, "score": [0, 1], "predict": [0, 1], "compute_binary_predict": 0, "y_true": 0, "y_pred_scor": 0, "threshold": [0, 5, 7], "none": [0, 1], "tpr": 0, "fpr": 0, "ppr": 0, "random_se": [0, 5], "42": [0, 5], "sourc": [0, 1], "discret": 0, "given": [0, 1], "binari": 0, "label": [0, 1, 5], "accord": 0, "provid": [0, 1, 7], "target": 0, "metric": [0, 5], "paramet": [0, 1, 5], "np": [0, 5], "ndarrai": 0, "The": [0, 1, 6, 7], "true": [0, 1, 5, 7], "between": 0, "0": [0, 1, 5, 7], "1": [0, 1, 5, 7], "option": [0, 7], "float": [0, 7], "whether": [0, 7], "us": [0, 1, 3, 6, 7], "specifi": [0, 1], "global": [0, 1], "default": 0, "posit": 0, "rate": 0, "recal": 0, "fals": [0, 1], "return": [0, 1, 5], "type": [0, 1, 5, 7], "A": [0, 1, 5, 7], "set": [0, 1, 6, 7], "function": [0, 1], "common": 0, "perform": [0, 1, 5], "fair": [0, 1, 5], "possibli": [0, 1], "fnr": 0, "evaluate_fair": 0, "y_pred": 0, "sensitive_attribut": [0, 5], "return_groupwise_metr": 0, "ratio": 0, "group": [0, 1], "wise": 0, "class": [0, 1, 5], "sensit": [0, 5], "attribut": 0, "protect": 0, "membership": 0, "bool": [0, 1], "onli": [0, 5], "dictionari": [0, 1], "kei": [0, 1, 7], "valu": [0, 1, 5, 7], "pair": [0, 1], "name": [0, 1, 5], "dict": [0, 2, 7], "evaluate_perform": 0, "note": [0, 5, 7], "current": [0, 1], "assum": [0, 1], "ar": [0, 1, 7], "should": [0, 1], "we": 0, "extend": 0, "multi": 0, "evaluate_predict": 0, "threshold_target": 0, "both": [0, 1], "i": [0, 1, 5, 6, 7], "which": [0, 1], "each": 0, "sampl": [0, 7], "belong": 0, "If": [0, 1], "comput": [0, 1], "groupwis": 0, "requir": 0, "metric_nam": 0, "metric_valu": 0, "evaluate_predictions_bootstrap": 0, "k": [0, 1], "200": 0, "confidence_pct": 0, "95": 0, "seed": [0, 1], "tupl": 0, "safe_divis": 0, "b": 0, "hyperparamet": [0, 1], "from": [0, 1, 5, 7], "distribut": [0, 7], "defin": [0, 1], "space": [0, 1], "suggest_callable_hyperparam": 0, "trial": [0, 2, 5], "hyperparameter_spac": [0, 5, 7], "param_prefix": 0, "learner": [0, 1], "top": [0, 7], "level": [0, 7], "instanti": 0, "parameter": 0, "ani": 0, "other": [0, 5, 7], "callabl": [0, 1], "thi": [0, 1, 7], "includ": 0, "classpath": [0, 2, 7], "importpath": 0, "condit": 0, "kwarg": [0, 5, 7], "basetri": 0, "object": [0, 1, 5, 7], "interact": 0, "sampler": [0, 1], "repres": 0, "str": [0, 1], "prefix": 0, "attach": 0, "all": [0, 1], "order": [0, 1], "uniqu": 0, "identifi": [0, 1], "them": 0, "its": 0, "word": [0, 1, 7], "argument": [0, 1, 7], "suggest_hyperparam": 0, "specif": [0, 1], "configur": 0, "an": [0, 1, 7], "suggest_numerical_hyperparam": 0, "config": 0, "param_id": 0, "helper": 0, "numer": 0, "": [0, 1, 5, 7], "suggest_random_hyperparam": 0, "random": [0, 1, 5], "determinist": 0, "number": [0, 1], "must": [0, 7], "itself": 0, "randomli": 0, "drawn": 0, "call": 0, "you": [0, 6, 7], "want": 0, "get": 0, "union": [0, 1], "path": [0, 1, 5, 7], "yaml": [0, 1, 4, 5, 7], "file": [0, 1, 4, 6, 7], "load": [0, 1], "els": 0, "ha": 0, "alreadi": [0, 1], "been": 0, "prevent": 0, "unnecessarili": 0, "re": 0, "same": [0, 1, 7], "multipl": [0, 1, 7], "time": [0, 5], "disk": 0, "int": [0, 5, 7], "gener": [0, 1, 5], "wa": 0, "deprec": 0, "sinc": 0, "version": 0, "3": [0, 5], "submodul": 0, "util": [0, 2], "enforc": 0, "some": 0, "criteria": [0, 1], "even": 0, "just": [0, 7], "maxim": [0, 7], "thresholdingevalu": 0, "s_true": 0, "base": [0, 1], "compute_global_accuraci": 0, "groupwise_fpr": 0, "groupwise_tpr": 0, "accuraci": [0, 5, 7], "post_hoc_fair": 0, "equal_fpr": 0, "equal_tpr": 0, "fpr_toler": 0, "0001": [0, 5], "tpr_toler": 0, "n_threshold": 0, "100": [0, 7], "show_progress": 0, "plot_roc": 0, "simpl": 0, "wrapper": [0, 6, 7], "optuna": [0, 1, 6, 7], "objectivefunct": [0, 5, 7], "x_train": [0, 5, 7], "y_train": [0, 5, 7], "x_val": 0, "y_val": 0, "eval_metr": [0, 5, 7], "s_train": [0, 5, 7], "s_val": [0, 5, 7], "x_test": [0, 5, 7], "y_test": [0, 5, 7], "s_test": [0, 5, 7], "other_eval_metr": [0, 5], "alpha": [0, 5], "5": [0, 5], "eval_func": 0, "trialresult": 0, "id": 0, "validation_result": 0, "test_result": 0, "train_result": 0, "model": [0, 1, 3, 6, 7], "fit_tim": 0, "algorithm": [0, 5, 7], "baselearn": [0, 1], "properti": [0, 1], "all_result": 0, "best_trial": [0, 7], "evaluate_model": 0, "x": [0, 1, 5], "y": [0, 1, 5], "static": 0, "fit_model": 0, "verbos": 0, "get_result": 0, "type_": 0, "valid": 0, "instantiate_model": 0, "hyperparam": 0, "import": [0, 1, 5, 7], "constructor": [0, 7], "plot": [0, 5], "x_axi": 0, "y_axi": 0, "pyplot_show": 0, "data_typ": 0, "reconstruct_model": [0, 7], "trial_result": 0, "result": [0, 1, 5, 7], "optunatun": [0, 5, 7], "objective_funct": [0, 5, 7], "direct": [0, 7], "study_kwarg": 0, "mostli": 0, "useless": 0, "boilerpl": 0, "optim": [0, 5, 7], "collect": 1, "depend": 1, "abc": 1, "interfac": 1, "follow": [1, 6, 7], "sklearn": [1, 5, 7], "abstract": 1, "fit": 1, "featur": [1, 5], "predict_proba": 1, "probabl": 1, "pertain": 1, "get_full_nam": 1, "obj": 1, "equal": 1, "import_object": 1, "find": 1, "import_path": 1, "can": [1, 5, 7], "variabl": 1, "handl": 1, "apply_recurs": 1, "dct": 1, "appli": 1, "pred": 1, "lambda": 1, "recurs": 1, "filter": 1, "field": 1, "predic": 1, "receiv": 1, "input": 1, "fit_dict": 1, "func": 1, "accept_kwarg": 1, "subset": 1, "v": 1, "whose": 1, "match": 1, "doe": 1, "accept": 1, "join_dictionari": 1, "join": 1, "one": 1, "data": [1, 5], "extract": 1, "http": 1, "github": [1, 6], "com": 1, "fairmlbook": 1, "io": 1, "blob": 1, "master": 1, "code": [1, 6], "creditscor": 1, "py": 1, "criteriadata": 1, "cdf": 1, "total": [1, 5], "creat": [1, 5], "instanc": 1, "margin": 1, "datafram": 1, "index": [1, 6], "column": 1, "being": 1, "fraction": 1, "peopl": 1, "below": 1, "succe": 1, "either": [1, 7], "arrai": 1, "compute_area": 1, "cutoff": 1, "compute_area_slic": 1, "pdf": 1, "compute_curv": 1, "compute_profit": 1, "target_r": 1, "coverag": 1, "demographic_cutoff": 1, "target_is_profit": 1, "effici": 1, "evaluate_opportun": 1, "fixed_cutoff": 1, "classmethod": 1, "from_individu": 1, "binsiz": 1, "025": 1, "recov": 1, "individu": 1, "three": 1, "predictor": [1, 7], "bin": 1, "size": 1, "per": 1, "mai": [1, 7], "restrict": 1, "get_best_demograph": 1, "get_best_fix": 1, "get_best_opportun": 1, "get_pdf": 1, "opportunity_cutoff": 1, "profit_cutoff": 1, "_": 1, "score_two_sided_profit": 1, "point": 1, "trisearch": 1, "two_sided_optimum": 1, "two_sided_rang": 1, "p": 1, "first_index_abov": 1, "smallest": 1, "exist": 1, "len": 1, "f": 1, "lo": 1, "hi": 1, "tol": 1, "trinari": 1, "search": [1, 6], "minim": [1, 6, 7], "over": [1, 6, 7], "within": 1, "work": 1, "quasiconvex": 1, "trisearch_int": 1, "tuner": [1, 2, 5, 7], "author": 1, "sgpjesu": 1, "yamlvalid": 1, "assert_argument_exist": 1, "check": [1, 6], "isntanti": 1, "expect": 1, "signatur": 1, "pass": [1, 5, 7], "rais": 1, "typeerror": 1, "assert_class_exist": 1, "python": 1, "environ": 1, "save": 1, "assert": 1, "attributeerror": 1, "valueerror": 1, "malform": 1, "modulenotfounderror": 1, "load_hyperparameter_spac": 1, "path_or_dict": 1, "encod": 1, "contain": 1, "structur": [1, 7], "output": 1, "outsid": 1, "randomvaluetri": 1, "fixedtri": 1, "non": 1, "studi": [1, 5, 7], "standalon": 1, "binar": 2, "modul": [2, 6], "evalu": [2, 5], "suggest": 2, "thresholding_evalu": 2, "api": [2, 6], "fairness_criteria": 2, "load_yaml": 2, "hpt": 3, "packag": [3, 6, 7], "train": [3, 6, 7], "todo": 4, "exampl": [4, 6, 7], "notebook": 4, "o": 5, "numpi": 5, "n_sampl": 5, "10": [5, 7], "rng": 5, "randomst": 5, "2": 5, "dataset": 5, "make_classif": 5, "def": 5, "generate_data": 5, "num_sampl": 5, "preval": 5, "sensitive_preval": 5, "scikit": 5, "learn": 5, "weight": 5, "random_st": 5, "attr": 5, "astyp": 5, "randint": 5, "4": [5, 7], "split": 5, "test": 5, "test_siz": 5, "indic": 5, "permut": 5, "test_indic": 5, "train_indic": 5, "pathlib": 5, "hyperparam_space_path": [5, 7], "multiple_algorithm": 5, "6": 5, "obj_func": [5, 7], "50": [5, 7], "equalized_odds_diff": 5, "still": 5, "here": [5, 7], "e": [5, 7], "g": [5, 7], "storag": [5, 7], "2023": 5, "09": 5, "05": 5, "13": 5, "38": 5, "51": 5, "722": 5, "new": 5, "memori": 5, "b114ffeb": 5, "ad7": 5, "4fc9": 5, "ac56": 5, "d6be007b64b": 5, "7": 5, "n_trial": [5, 7], "show_progress_bar": 5, "n_job": [5, 7], "cpu_count": 5, "warn": 5, "root": 5, "39": 5, "t": 5, "figur": 5, "out": [5, 6], "how": 5, "lt": 5, "linear_model": [5, 7], "_logist": 5, "logisticregress": [5, 7], "gt": 5, "852": 5, "finish": 5, "9099": 5, "learner_typ": 5, "lr": [5, 7], "learner_lr_penalti": 5, "l2": 5, "learner_lr_c": 5, "01": [5, 7], "learner_lr_tol": 5, "9": 5, "658116684018327e": 5, "learner_lr_max_it": 5, "145": 5, "learner_lr_solv": 5, "liblinear": 5, "best": [5, 7], "979": 5, "89735": 5, "1e": 5, "820718867973598e": 5, "78": 5, "52": 5, "157": 5, "977866701242914e": 5, "490": 5, "162": 5, "00029046640022955015": 5, "230": 5, "170": 5, "00044324589483900253": 5, "253": 5, "220": 5, "8": 5, "90335": 5, "250266673984556e": 5, "2043": 5, "229": 5, "9083": 5, "001": 5, "007480056190151736": 5, "331": 5, "434": 5, "000919815910884721": 5, "225": 5, "55": 5, "322": 5, "12": 5, "9115": 5, "dt": [5, 7], "learner_dt_max_depth": 5, "learner_dt_criterion": 5, "entropi": [5, 7], "learner_dt_min_samples_split": 5, "learner_dt_min_samples_leaf": 5, "learner_dt_splitt": 5, "556": 5, "18": 5, "0007496310261291808": 5, "148": 5, "835": 5, "17": 5, "58": 5, "377": 5, "16": 5, "9075": 5, "147": 5, "gini": [5, 7], "15": 5, "74": 5, "760": 5, "11": 5, "8938": 5, "59": 5, "282": 5, "89815": 5, "41": 5, "24": 5, "889": 5, "8988": 5, "87": 5, "551": 5, "90465": 5, "rf": 5, "learner_rf_n_estim": 5, "learner_rf_max_depth": 5, "learner_rf_criterion": 5, "learner_rf_min_samples_split": 5, "93": 5, "learner_rf_min_samples_leaf": 5, "learner_rf_max_featur": 5, "sqrt": 5, "943": 5, "8764": 5, "03": 5, "247": 5, "23": 5, "91145": 5, "77": 5, "04": 5, "824": 5, "19": 5, "8851": 5, "134": 5, "31": 5, "287": 5, "28": 5, "90995": 5, "018047173931659e": 5, "91": 5, "742": 5, "20": [5, 7], "8943": 5, "06": 5, "365": 5, "30": 5, "001232757989464645": 5, "772": 5, "07": 5, "989": 5, "21": 5, "8946": 5, "183": 5, "27": 5, "9006": 5, "37": 5, "26": 5, "252": 5, "22": 5, "90785": 5, "732": 5, "33": 5, "91045": 5, "48": 5, "957": 5, "35": 5, "000362871828193693": 5, "209": 5, "25": 5, "32": 5, "9079": 5, "49": 5, "526": 5, "000530259062154841": 5, "671": 5, "477": 5, "34": 5, "91115": 5, "56": 5, "68": 5, "log2": 5, "402": 5, "91015": 5, "14": 5, "333": 5, "36": 5, "9036": 5, "79": 5, "881": 5, "003619103045498826": 5, "046": 5, "90855": 5, "43": 5, "929": 5, "91165": 5, "45": 5, "44": 5, "191": 5, "00017422069892822042": 5, "140": 5, "562": 5, "40": 5, "90035": 5, "234": 5, "46": 5, "9101": 5, "47": 5, "552": 5, "167786769242655e": 5, "123": 5, "960": 5, "8982": 5, "122": 5, "313": 5, "86655": 5, "54": 5, "815": 5, "91155": 5, "194": 5, "263": 5, "895": 5, "66": 5, "513": 5, "88935": 5, "99": 5, "312": 5, "90535": 5, "1131": 5, "112": 5, "522": 5, "91215": 5, "1044": 5, "57": 5, "346": 5, "29": 5, "91195": 5, "6297": 5, "867": 5, "9117": 5, "13280": 5, "113": 5, "91175": 5, "15986": 5, "98": 5, "393": 5, "9118": 5, "15376": 5, "cpu": 5, "user": 5, "4h": 5, "52min": 5, "sy": 5, "1min": 5, "54min": 5, "wall": 5, "34min": 5, "hue": 5, "easi": 6, "framework": [6, 7], "help": [6, 7], "hundr": [6, 7], "It": [6, 7], "essenti": [6, 7], "full": [6, 7], "avail": 6, "repositori": 6, "sub": 6, "page": 6, "usag": 6, "readm": 6, "refer": 6, "tune": 7, "pypi": 7, "pip": 7, "Then": 7, "run": 7, "would": 7, "store": 7, "reconstruct": 7, "clf": 7, "One": 7, "more": 7, "tree": 7, "decisiontreeclassifi": 7, "max_depth": 7, "rang": 7, "minimum": 7, "maximum": 7, "log": 7, "logarithm": 7, "scale": 7, "fix": 7, "categori": 7, "criterion": 7, "pre": 7, "min_samples_split": 7, "explor": 7, "onc": 7, "c": 7}, "objects": {"hpt": [[0, 0, 0, "-", "binarize"], [0, 0, 0, "-", "evaluation"], [0, 0, 0, "-", "suggest"], [0, 0, 0, "-", "thresholding_evaluation"], [0, 0, 0, "-", "tuner"]], "hpt.binarize": [[0, 1, 1, "", "compute_binary_predictions"]], "hpt.evaluation": [[0, 1, 1, "", "evaluate_fairness"], [0, 1, 1, "", "evaluate_performance"], [0, 1, 1, "", "evaluate_predictions"], [0, 1, 1, "", "evaluate_predictions_bootstrap"], [0, 1, 1, "", "safe_division"]], "hpt.suggest": [[0, 1, 1, "", "suggest_callable_hyperparams"], [0, 1, 1, "", "suggest_hyperparams"], [0, 1, 1, "", "suggest_numerical_hyperparam"], [0, 1, 1, "", "suggest_random_hyperparams"]], "hpt.thresholding_evaluation": [[0, 2, 1, "", "ThresholdingEvaluation"]], "hpt.thresholding_evaluation.ThresholdingEvaluation": [[0, 3, 1, "", "compute_global_accuracy"], [0, 3, 1, "", "post_hoc_fairness"]], "hpt.tuner": [[0, 2, 1, "", "ObjectiveFunction"], [0, 2, 1, "", "OptunaTuner"]], "hpt.tuner.ObjectiveFunction": [[0, 2, 1, "", "TrialResults"], [0, 5, 1, "", "all_results"], [0, 5, 1, "", "best_trial"], [0, 3, 1, "", "evaluate_model"], [0, 3, 1, "", "fit_model"], [0, 3, 1, "", "get_results"], [0, 3, 1, "", "instantiate_model"], [0, 3, 1, "", "plot"], [0, 3, 1, "", "reconstruct_model"], [0, 5, 1, "", "results"]], "hpt.tuner.ObjectiveFunction.TrialResults": [[0, 4, 1, "", "algorithm"], [0, 4, 1, "", "fit_time"], [0, 4, 1, "", "hyperparameters"], [0, 4, 1, "", "id"], [0, 4, 1, "", "model"], [0, 4, 1, "", "test_results"], [0, 4, 1, "", "train_results"], [0, 4, 1, "", "validation_results"]], "hpt.tuner.OptunaTuner": [[0, 3, 1, "", "optimize"], [0, 5, 1, "", "results"]], "hpt.utils": [[1, 0, 0, "-", "api"], [1, 0, 0, "-", "classpath"], [1, 0, 0, "-", "dict"], [1, 0, 0, "-", "fairness_criteria"], [1, 0, 0, "-", "load_yaml"], [1, 0, 0, "-", "trial"]], "hpt.utils.api": [[1, 2, 1, "", "BaseLearner"]], "hpt.utils.api.BaseLearner": [[1, 3, 1, "", "fit"], [1, 3, 1, "", "predict_proba"]], "hpt.utils.classpath": [[1, 1, 1, "", "get_full_name"], [1, 1, 1, "", "import_object"]], "hpt.utils.dict": [[1, 1, 1, "", "apply_recursively"], [1, 1, 1, "", "fit_dict"], [1, 1, 1, "", "join_dictionaries"]], "hpt.utils.fairness_criteria": [[1, 2, 1, "", "CriteriaData"], [1, 1, 1, "", "first_index_above"], [1, 1, 1, "", "trisearch"], [1, 1, 1, "", "trisearch_int"]], "hpt.utils.fairness_criteria.CriteriaData": [[1, 3, 1, "", "compute_area"], [1, 3, 1, "", "compute_area_slices"], [1, 3, 1, "", "compute_curves"], [1, 3, 1, "", "compute_profit"], [1, 3, 1, "", "coverage"], [1, 3, 1, "", "demographic_cutoffs"], [1, 3, 1, "", "efficiency"], [1, 3, 1, "", "evaluate_opportunity"], [1, 3, 1, "", "fixed_cutoffs"], [1, 3, 1, "", "from_individuals"], [1, 3, 1, "", "get_best_demographic"], [1, 3, 1, "", "get_best_fixed"], [1, 3, 1, "", "get_best_opportunity"], [1, 3, 1, "", "get_pdfs"], [1, 3, 1, "", "opportunity_cutoffs"], [1, 3, 1, "", "profit_cutoffs"], [1, 3, 1, "", "score_two_sided_profit"], [1, 5, 1, "", "trisearch"], [1, 3, 1, "", "two_sided_optimum"], [1, 3, 1, "", "two_sided_ranges"]], "hpt.utils.load_yaml": [[1, 2, 1, "", "YamlValidator"], [1, 1, 1, "", "load_hyperparameter_space"]], "hpt.utils.load_yaml.YamlValidator": [[1, 3, 1, "", "assert_argument_exists"], [1, 3, 1, "", "assert_class_exists"]], "hpt.utils.trial": [[1, 2, 1, "", "RandomValueTrial"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"hpt": [0, 1, 2, 5, 7], "packag": [0, 1, 2, 5], "binar": 0, "modul": [0, 1], "evalu": 0, "suggest": 0, "thresholding_evalu": 0, "tuner": 0, "util": 1, "api": 1, "classpath": 1, "dict": 1, "fairness_criteria": 1, "load_yaml": 1, "trial": 1, "exampl": 3, "jupyt": 3, "notebook": 3, "us": 5, "train": 5, "model": 5, "welcom": 6, "hyperparamet": [6, 7], "tune": 6, "": 6, "document": 6, "indic": 6, "tabl": 6, "readm": 7, "md": 7, "instal": 7, "get": 7, "start": 7, "defin": 7, "space": 7}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"hpt package": [[0, "hpt-package"], [2, "hpt-package"]], "hpt.binarize module": [[0, "module-hpt.binarize"]], "hpt.evaluation module": [[0, "module-hpt.evaluation"]], "hpt.suggest module": [[0, "module-hpt.suggest"]], "hpt.thresholding_evaluation module": [[0, "hpt-thresholding-evaluation-module"]], "hpt.tuner module": [[0, "module-hpt.tuner"]], "hpt.utils package": [[1, "hpt-utils-package"]], "hpt.utils.api module": [[1, "module-hpt.utils.api"]], "hpt.utils.classpath module": [[1, "module-hpt.utils.classpath"]], "hpt.utils.dict module": [[1, "module-hpt.utils.dict"]], "hpt.utils.fairness_criteria module": [[1, "module-hpt.utils.fairness_criteria"]], "hpt.utils.load_yaml module": [[1, "module-hpt.utils.load_yaml"]], "hpt.utils.trial module": [[1, "module-hpt.utils.trial"]], "Example Jupyter Notebook": [[3, "example-jupyter-notebook"]], "Use hpt package to train models": [[5, "Use-hpt-package-to-train-models"]], "Welcome to hyperparameter-tuning\u2019s documentation!": [[6, "welcome-to-hyperparameter-tuning-s-documentation"]], "Indices and tables": [[6, "indices-and-tables"]], "README.md": [[7, "readme-md"]], "hpt": [[7, "hpt"]], "Install": [[7, "install"]], "Getting started": [[7, "getting-started"]], "Defining a hyperparameter space": [[7, "defining-a-hyperparameter-space"]]}, "indexentries": {"objectivefunction (class in hpt.tuner)": [[0, "hpt.tuner.ObjectiveFunction"]], "objectivefunction.trialresults (class in hpt.tuner)": [[0, "hpt.tuner.ObjectiveFunction.TrialResults"]], "optunatuner (class in hpt.tuner)": [[0, "hpt.tuner.OptunaTuner"]], "thresholdingevaluation (class in hpt.thresholding_evaluation)": [[0, "hpt.thresholding_evaluation.ThresholdingEvaluation"]], "algorithm (hpt.tuner.objectivefunction.trialresults attribute)": [[0, "hpt.tuner.ObjectiveFunction.TrialResults.algorithm"]], "all_results (hpt.tuner.objectivefunction property)": [[0, "hpt.tuner.ObjectiveFunction.all_results"]], "best_trial (hpt.tuner.objectivefunction property)": [[0, "hpt.tuner.ObjectiveFunction.best_trial"]], "compute_binary_predictions() (in module hpt.binarize)": [[0, "hpt.binarize.compute_binary_predictions"]], "compute_global_accuracy() (hpt.thresholding_evaluation.thresholdingevaluation method)": [[0, "hpt.thresholding_evaluation.ThresholdingEvaluation.compute_global_accuracy"]], "evaluate_fairness() (in module hpt.evaluation)": [[0, "hpt.evaluation.evaluate_fairness"]], "evaluate_model() (hpt.tuner.objectivefunction method)": [[0, "hpt.tuner.ObjectiveFunction.evaluate_model"]], "evaluate_performance() (in module hpt.evaluation)": [[0, "hpt.evaluation.evaluate_performance"]], "evaluate_predictions() (in module hpt.evaluation)": [[0, "hpt.evaluation.evaluate_predictions"]], "evaluate_predictions_bootstrap() (in module hpt.evaluation)": [[0, "hpt.evaluation.evaluate_predictions_bootstrap"]], "fit_model() (hpt.tuner.objectivefunction static method)": [[0, "hpt.tuner.ObjectiveFunction.fit_model"]], "fit_time (hpt.tuner.objectivefunction.trialresults attribute)": [[0, "hpt.tuner.ObjectiveFunction.TrialResults.fit_time"]], "get_results() (hpt.tuner.objectivefunction method)": [[0, "hpt.tuner.ObjectiveFunction.get_results"]], "hpt.binarize": [[0, "module-hpt.binarize"]], "hpt.evaluation": [[0, "module-hpt.evaluation"]], "hpt.suggest": [[0, "module-hpt.suggest"]], "hpt.thresholding_evaluation": [[0, "module-hpt.thresholding_evaluation"]], "hpt.tuner": [[0, "module-hpt.tuner"]], "hyperparameters (hpt.tuner.objectivefunction.trialresults attribute)": [[0, "hpt.tuner.ObjectiveFunction.TrialResults.hyperparameters"]], "id (hpt.tuner.objectivefunction.trialresults attribute)": [[0, "hpt.tuner.ObjectiveFunction.TrialResults.id"]], "instantiate_model() (hpt.tuner.objectivefunction static method)": [[0, "hpt.tuner.ObjectiveFunction.instantiate_model"]], "model (hpt.tuner.objectivefunction.trialresults attribute)": [[0, "hpt.tuner.ObjectiveFunction.TrialResults.model"]], "module": [[0, "module-hpt.binarize"], [0, "module-hpt.evaluation"], [0, "module-hpt.suggest"], [0, "module-hpt.thresholding_evaluation"], [0, "module-hpt.tuner"], [1, "module-hpt.utils.api"], [1, "module-hpt.utils.classpath"], [1, "module-hpt.utils.dict"], [1, "module-hpt.utils.fairness_criteria"], [1, "module-hpt.utils.load_yaml"], [1, "module-hpt.utils.trial"]], "optimize() (hpt.tuner.optunatuner method)": [[0, "hpt.tuner.OptunaTuner.optimize"]], "plot() (hpt.tuner.objectivefunction method)": [[0, "hpt.tuner.ObjectiveFunction.plot"]], "post_hoc_fairness() (hpt.thresholding_evaluation.thresholdingevaluation method)": [[0, "hpt.thresholding_evaluation.ThresholdingEvaluation.post_hoc_fairness"]], "reconstruct_model() (hpt.tuner.objectivefunction method)": [[0, "hpt.tuner.ObjectiveFunction.reconstruct_model"]], "results (hpt.tuner.objectivefunction property)": [[0, "hpt.tuner.ObjectiveFunction.results"]], "results (hpt.tuner.optunatuner property)": [[0, "hpt.tuner.OptunaTuner.results"]], "safe_division() (in module hpt.evaluation)": [[0, "hpt.evaluation.safe_division"]], "suggest_callable_hyperparams() (in module hpt.suggest)": [[0, "hpt.suggest.suggest_callable_hyperparams"]], "suggest_hyperparams() (in module hpt.suggest)": [[0, "hpt.suggest.suggest_hyperparams"]], "suggest_numerical_hyperparam() (in module hpt.suggest)": [[0, "hpt.suggest.suggest_numerical_hyperparam"]], "suggest_random_hyperparams() (in module hpt.suggest)": [[0, "hpt.suggest.suggest_random_hyperparams"]], "test_results (hpt.tuner.objectivefunction.trialresults attribute)": [[0, "hpt.tuner.ObjectiveFunction.TrialResults.test_results"]], "train_results (hpt.tuner.objectivefunction.trialresults attribute)": [[0, "hpt.tuner.ObjectiveFunction.TrialResults.train_results"]], "validation_results (hpt.tuner.objectivefunction.trialresults attribute)": [[0, "hpt.tuner.ObjectiveFunction.TrialResults.validation_results"]], "baselearner (class in hpt.utils.api)": [[1, "hpt.utils.api.BaseLearner"]], "criteriadata (class in hpt.utils.fairness_criteria)": [[1, "hpt.utils.fairness_criteria.CriteriaData"]], "randomvaluetrial (class in hpt.utils.trial)": [[1, "hpt.utils.trial.RandomValueTrial"]], "yamlvalidator (class in hpt.utils.load_yaml)": [[1, "hpt.utils.load_yaml.YamlValidator"]], "apply_recursively() (in module hpt.utils.dict)": [[1, "hpt.utils.dict.apply_recursively"]], "assert_argument_exists() (hpt.utils.load_yaml.yamlvalidator method)": [[1, "hpt.utils.load_yaml.YamlValidator.assert_argument_exists"]], "assert_class_exists() (hpt.utils.load_yaml.yamlvalidator method)": [[1, "hpt.utils.load_yaml.YamlValidator.assert_class_exists"]], "compute_area() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.compute_area"]], "compute_area_slices() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.compute_area_slices"]], "compute_curves() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.compute_curves"]], "compute_profit() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.compute_profit"]], "coverage() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.coverage"]], "demographic_cutoffs() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.demographic_cutoffs"]], "efficiency() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.efficiency"]], "evaluate_opportunity() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.evaluate_opportunity"]], "first_index_above() (in module hpt.utils.fairness_criteria)": [[1, "hpt.utils.fairness_criteria.first_index_above"]], "fit() (hpt.utils.api.baselearner method)": [[1, "hpt.utils.api.BaseLearner.fit"]], "fit_dict() (in module hpt.utils.dict)": [[1, "hpt.utils.dict.fit_dict"]], "fixed_cutoffs() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.fixed_cutoffs"]], "from_individuals() (hpt.utils.fairness_criteria.criteriadata class method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.from_individuals"]], "get_best_demographic() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.get_best_demographic"]], "get_best_fixed() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.get_best_fixed"]], "get_best_opportunity() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.get_best_opportunity"]], "get_full_name() (in module hpt.utils.classpath)": [[1, "hpt.utils.classpath.get_full_name"]], "get_pdfs() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.get_pdfs"]], "hpt.utils.api": [[1, "module-hpt.utils.api"]], "hpt.utils.classpath": [[1, "module-hpt.utils.classpath"]], "hpt.utils.dict": [[1, "module-hpt.utils.dict"]], "hpt.utils.fairness_criteria": [[1, "module-hpt.utils.fairness_criteria"]], "hpt.utils.load_yaml": [[1, "module-hpt.utils.load_yaml"]], "hpt.utils.trial": [[1, "module-hpt.utils.trial"]], "import_object() (in module hpt.utils.classpath)": [[1, "hpt.utils.classpath.import_object"]], "join_dictionaries() (in module hpt.utils.dict)": [[1, "hpt.utils.dict.join_dictionaries"]], "load_hyperparameter_space() (in module hpt.utils.load_yaml)": [[1, "hpt.utils.load_yaml.load_hyperparameter_space"]], "opportunity_cutoffs() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.opportunity_cutoffs"]], "predict_proba() (hpt.utils.api.baselearner method)": [[1, "hpt.utils.api.BaseLearner.predict_proba"]], "profit_cutoffs() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.profit_cutoffs"]], "score_two_sided_profit() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.score_two_sided_profit"]], "trisearch (hpt.utils.fairness_criteria.criteriadata property)": [[1, "hpt.utils.fairness_criteria.CriteriaData.trisearch"]], "trisearch() (in module hpt.utils.fairness_criteria)": [[1, "hpt.utils.fairness_criteria.trisearch"]], "trisearch_int() (in module hpt.utils.fairness_criteria)": [[1, "hpt.utils.fairness_criteria.trisearch_int"]], "two_sided_optimum() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.two_sided_optimum"]], "two_sided_ranges() (hpt.utils.fairness_criteria.criteriadata method)": [[1, "hpt.utils.fairness_criteria.CriteriaData.two_sided_ranges"]]}})